require 'rspec'

RSpec.shared_examples_for 'Exploit metadata' do
  describe "metadata" do
    subject { described_class }

    let(:url_regex) { URI::DEFAULT_PARSER.make_regexp(%w[http https]) }

    describe "id" do
      it "must define an id" do
        expect(subject.id).to_not be(nil)
        expect(subject.id).to be_kind_of(String)
        expect(subject.id).to_not be_empty
      end

      it "must not contain whitespace" do
        expect(subject.id).to_not match(/\s/), "id contains whitespace"
      end

      it "must be of the form '<product>/CVE-YYYY-XXXX'" do
        expect(subject.id).to match(%r{\A[^/]+/CVE-\d{4}-\d{4,5}\z}), "did not match '<product>/CVE-YYYY-XXXX'"
      end

      it "must call register with the id" do
        expect(Ronin::Exploits.registry[subject.id]).to be(subject)
      end
    end

    describe "quality" do
      it "must define a quality rating" do
        expect(subject.quality).to_not be(nil)
      end

      it "must be either :untested, :testing, :poc, :weaponized" do
        expect(subject.quality).to be(:untested).or(be(:testing)).or(be(:poc)).or(be(:weaponized))
      end
    end

    describe "release_date" do
      it "must define a release_date" do
        expect(subject.release_date).to_not be(nil)
        expect(subject.release_date).to be_kind_of(Date)
      end
    end

    describe "disclosure_date" do
      it "must define a disclosure_date" do
        expect(subject.disclosure_date).to_not be(nil)
        expect(subject.disclosure_date).to be_kind_of(Date)
      end
    end

    describe "advisories" do
      it "must define at least one advisory" do
        expect(subject.advisories).to_not be_empty
      end

      it "must include the advisory matching the exploit's ID name" do
        advisory_from_id = File.basename(subject.id)

        expect(subject.advisories.map(&:id)).to include(advisory_from_id)
      end

      it "all advisory URLs must be valid URLs" do
        expect(subject.advisories.map(&:url)).to all(match(url_regex))
      end
    end

    describe "authors" do
      it "must define at least one author" do
        expect(subject.authors).to_not be_empty
      end

      describe "primary author" do
        it "must have a name" do
          expect(subject.authors.first.name).to_not be(nil)
          expect(subject.authors.first.name).to_not be_empty
        end

        it "must have an email" do
          expect(subject.authors.first.email).to_not be(nil)
          expect(subject.authors.first.email).to_not be_empty
        end
      end
    end

    describe "summary" do
      it "must define a summary" do
        expect(subject.summary).to_not be(nil)
        expect(subject.summary).to_not be_empty
      end

      it "must be a single sentence" do
        expect(subject.summary).to_not include('. '), "contains more than one sentence"
      end

      it "must be a single line" do
        expect(subject.summary).to_not include("\n"), "contains a newline"
      end

      it "must not include any special characters" do
        expect(subject.summary).to match(/\A[[:print:]]+\z/), "contains non-printable characters"
      end

      it "must not end with a '.'" do
        expect(subject.summary).to_not end_with('.'), "ends with a '.'"
      end

      it "must not have leading or trailing whitespace" do
        expect(subject.summary).to_not match(/\A\s+/), "has leading whitespace"
        expect(subject.summary).to_not match(/\s+\z/), "has trailing whitespace"
      end
    end

    describe "description" do
      it "must define a description" do
        expect(subject.description).to_not be(nil)
        expect(subject.description).to_not be_empty
      end

      it "must be more than one line" do
        expect(subject.description.count("\n")).to (be > 1), "did not contain more than one line"
      end

      it "must strip any common indentation for each line" do
        expect(subject.description).to match(/^\w+/), "did not contain at least one unindented line"
      end

      it "must not include any special characters" do
        expect(subject.description).to match(/\A[[:print:]\n]+\z/), "contains non-printable characters"
      end

      it "must not have leading or trailing whitespace" do
        expect(subject.description).to_not match(/\A\s+/), "has leading whitespace"
        expect(subject.description).to_not match(/[ \t\v\r]+\n+\z/), "has trailing whitespace"
      end
    end

    describe "references" do
      it "must define at least one reference URL" do
        expect(subject.references).to_not be_empty
      end

      it "must define valid URLs" do
        expect(subject.references).to all(match(url_regex)), "contains an invalid URL"
      end
    end
  end
end
